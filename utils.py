# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import re
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional
from config import EMOJIS, TASK_STATUS, TASK_PRIORITY, config

def _to_local_time(dt: datetime) -> datetime:
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –Ω–∞ –≤—Ö–æ–¥–µ UTC (–µ—Å–ª–∏ tzinfo –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    if not dt:
        return None
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    target_tz = timezone(timedelta(hours=config.DISPLAY_TZ_OFFSET_HOURS))
    return dt.astimezone(target_tz)

def get_current_tashkent_time() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–∞—à–∫–µ–Ω—Ç–µ (UTC+5)"""
    utc_now = datetime.utcnow().replace(tzinfo=timezone.utc)
    tashkent_tz = timezone(timedelta(hours=config.DISPLAY_TZ_OFFSET_HOURS))
    return utc_now.astimezone(tashkent_tz).replace(tzinfo=None)

def to_utc(dt: datetime) -> Optional[datetime]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ DISPLAY_TZ_OFFSET_HOURS) –≤ UTC (naive)."""
    if not dt:
        return None
    if dt.tzinfo is None:
        local_tz = timezone(timedelta(hours=config.DISPLAY_TZ_OFFSET_HOURS))
        dt = dt.replace(tzinfo=local_tz)
    return dt.astimezone(timezone.utc).replace(tzinfo=None)

def format_datetime(dt: datetime, show_time: bool = True, is_deadline: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        dt: –û–±—ä–µ–∫—Ç datetime
        show_time: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    if isinstance(dt, str):
        try:
            dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))
        except:
            return dt
    dt_local = _to_local_time(dt)
    if show_time:
        return dt_local.strftime("%d.%m.%Y %H:%M")
    return dt_local.strftime("%d.%m.%Y")

def format_task(task: Dict, detailed: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    
    Args:
        task: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
        detailed: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    status_emoji = EMOJIS.get(task['status'], EMOJIS['pending'])
    priority_emoji = EMOJIS.get(f'priority_{task["priority"]}', '')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"{status_emoji} **{task['title']}**\n\n"
    
    if detailed:
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"üÜî **ID:** {task['id']}\n"
        text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {task['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        
        text += f"üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {task['creator_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üéØ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task['assignee_name'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n\n"
        
        text += f"üìä **–°—Ç–∞—Ç—É—Å:** {TASK_STATUS[task['status']]} {status_emoji}\n"
        text += f"üî• **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {TASK_PRIORITY[task['priority']]} {priority_emoji}\n\n"
        
        # –î–∞—Ç—ã
        created_at = format_datetime(task['created_at'])
        text += f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {created_at}\n"
        
        if task['deadline']:
            deadline = format_datetime(task['deadline'], is_deadline=True)
            text += f"‚è∞ **–î–µ–¥–ª–∞–π–Ω:** {deadline}\n"
        
        if task['completed_at']:
            completed_at = format_datetime(task['completed_at'])
            text += f"‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** {completed_at}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ UTC)
        if task['deadline'] and task['status'] not in ['completed', 'cancelled']:
            deadline_dt = datetime.fromisoformat(task['deadline'].replace('Z', '+00:00')) if isinstance(task['deadline'], str) else task['deadline']
            if isinstance(deadline_dt, datetime):
                if deadline_dt.tzinfo is None:
                    deadline_dt = deadline_dt.replace(tzinfo=timezone.utc)
                now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
                if deadline_dt < now_utc:
                    text += f"\n‚ö†Ô∏è **–ó–ê–î–ê–ß–ê –ü–†–û–°–†–û–ß–ï–ù–ê!**"
    else:
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"üéØ {task['assignee_name'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        text += f"üî• {TASK_PRIORITY[task['priority']]}\n"
        
        if task['deadline']:
            deadline = format_datetime(task['deadline'], show_time=False)
            text += f"‚è∞ {deadline}\n"
    
    return text

def validate_deadline(deadline_str: str) -> Optional[datetime]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–∞
    
    Args:
        deadline_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
        
    Returns:
        –û–±—ä–µ–∫—Ç datetime –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    """
    if not deadline_str:
        return None
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        "%d.%m.%Y %H:%M",
        "%d.%m.%Y",
        "%d/%m/%Y %H:%M", 
        "%d/%m/%Y",
        "%Y-%m-%d %H:%M",
        "%Y-%m-%d"
    ]
    
    for fmt in formats:
        try:
            dt = datetime.strptime(deadline_str, fmt)
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è
            if "%H:%M" not in fmt:
                dt = dt.replace(hour=23, minute=59, second=59)
            return dt
        except ValueError:
            continue
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    deadline_str = deadline_str.lower().strip()
    
    # "—á–µ—Ä–µ–∑ X –¥–Ω–µ–π/—á–∞—Å–æ–≤/–º–∏–Ω—É—Ç"
    current_time = get_current_tashkent_time()
    patterns = [
        (r'—á–µ—Ä–µ–∑ (\d+) –¥–Ω', lambda x: current_time + timedelta(days=int(x))),
        (r'—á–µ—Ä–µ–∑ (\d+) —á', lambda x: current_time + timedelta(hours=int(x))),
        (r'—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω', lambda x: current_time + timedelta(minutes=int(x))),
        (r'–∑–∞–≤—Ç—Ä–∞', lambda x: current_time.replace(hour=23, minute=59, second=59) + timedelta(days=1)),
        (r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', lambda x: current_time.replace(hour=23, minute=59, second=59) + timedelta(days=2)),
    ]
    
    for pattern, func in patterns:
        match = re.search(pattern, deadline_str)
        if match:
            return func(match.group(1) if match.groups() else None)
    
    return None

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} –ë"
    elif size_bytes < 1024**2:
        return f"{size_bytes/1024:.1f} –ö–ë"
    elif size_bytes < 1024**3:
        return f"{size_bytes/1024**2:.1f} –ú–ë"
    else:
        return f"{size_bytes/1024**3:.1f} –ì–ë"

def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
    if len(text) <= max_length:
        return text
    return text[:max_length-len(suffix)] + suffix

def format_user_mention(user_name: str, user_id: int = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id:
        return f"[@{user_name}](tg://user?id={user_id})"
    return f"**{user_name}**"

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    return EMOJIS.get(status, EMOJIS['pending'])

def get_priority_emoji(priority: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    return EMOJIS.get(f'priority_{priority}', '')

def format_progress_bar(completed: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if total == 0:
        return "‚ñà" * length
    
    filled = int(length * completed / total)
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    percentage = int(100 * completed / total)
    
    return f"{bar} {percentage}%"

def parse_priority(priority_str: str) -> str:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    priority_str = priority_str.lower().strip()
    
    priority_map = {
        '–Ω–∏–∑–∫–∏–π': 'low',
        '–Ω–∏–∑': 'low',
        'low': 'low',
        'l': 'low',
        '1': 'low',
        
        '—Å—Ä–µ–¥–Ω–∏–π': 'medium',
        '—Å—Ä–µ–¥': 'medium',
        'medium': 'medium',
        'm': 'medium',
        '2': 'medium',
        
        '–≤—ã—Å–æ–∫–∏–π': 'high',
        '–≤—ã—Å': 'high',
        'high': 'high',
        'h': 'high',
        '3': 'high',
    }
    
    return priority_map.get(priority_str, 'medium')

def is_valid_telegram_username(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Telegram username"""
    if not username:
        return False
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.lstrip('@')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 5-32 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    pattern = r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$'
    return bool(re.match(pattern, username))

def format_duration(start_time: datetime, end_time: datetime = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not end_time:
        end_time = get_current_tashkent_time()
    
    duration = end_time - start_time
    
    if duration.days > 0:
        return f"{duration.days} –¥–Ω. {duration.seconds // 3600} —á."
    elif duration.seconds >= 3600:
        hours = duration.seconds // 3600
        minutes = (duration.seconds % 3600) // 60
        return f"{hours} —á. {minutes} –º–∏–Ω."
    else:
        minutes = duration.seconds // 60
        return f"{minutes} –º–∏–Ω."

