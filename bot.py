# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
–ö—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters,
    ContextTypes,
    ConversationHandler
)

from config import config, EMOJIS, TASK_STATUS, TASK_PRIORITY, USER_ROLES
from database import db
from auth import AuthManager
from utils import format_task, format_datetime, validate_deadline, to_utc, get_current_tashkent_time
from notifications import NotificationManager
from reports import ReportGenerator

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(WAITING_PASSWORD, CREATING_TASK_TITLE, CREATING_TASK_DESCRIPTION, 
 CREATING_TASK_ASSIGNEE, CREATING_TASK_DEADLINE, CREATING_TASK_PRIORITY,
 EDIT_FIELD_SELECT, EDIT_FIELD_INPUT, CONFIRM_CANCEL) = range(9)

class TaskManagerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        self.auth_manager = AuthManager()
        self.notification_manager = NotificationManager()
        self.report_generator = ReportGenerator()
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    def create_main_menu_keyboard(self, user_role: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        keyboard = []
        
        if user_role == 'admin':
            keyboard.extend([
                [InlineKeyboardButton(f"{EMOJIS['create_task']} –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
                [InlineKeyboardButton(f"{EMOJIS['all_tasks']} –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="all_tasks"),
                 InlineKeyboardButton(f"{EMOJIS['my_tasks']} –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
                [InlineKeyboardButton("üîΩ –§–∏–ª—å—Ç—Ä—ã", callback_data="filters_menu")],
                [InlineKeyboardButton(f"{EMOJIS['reports']} –û—Ç—á—ë—Ç—ã", callback_data="reports"),
                 InlineKeyboardButton(f"{EMOJIS['gantt']} –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞", callback_data="gantt_chart")],
                [InlineKeyboardButton(f"{EMOJIS['settings']} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="user_management")]
            ])
        else:
            keyboard.extend([
                [InlineKeyboardButton(f"{EMOJIS['my_tasks']} –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
                [InlineKeyboardButton(f"{EMOJIS['pending']} –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="active_tasks"),
                 InlineKeyboardButton(f"{EMOJIS['done']} –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="completed_tasks")],
                [InlineKeyboardButton("üîΩ –§–∏–ª—å—Ç—Ä—ã", callback_data="filters_menu")],
                [InlineKeyboardButton(f"{EMOJIS['reports']} –ú–æ–π –æ—Ç—á—ë—Ç", callback_data="report_my_excel")]
            ])
        
        keyboard.append([InlineKeyboardButton(f"{EMOJIS['notification']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="user_settings")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def create_filters_keyboard(self) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è", callback_data="filter_status_new"), InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data="filter_status_in_progress")],
            [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data="filter_status_completed"), InlineKeyboardButton("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞", callback_data="filter_status_overdue")],
            [InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í—ã—Å–æ–∫–∏–π", callback_data="filter_priority_high"), InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="filter_priority_medium")],
            [InlineKeyboardButton("–ù–∏–∑–∫–∏–π", callback_data="filter_priority_low")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_task_list_keyboard(self, tasks: List[Dict], page: int = 0, 
                                 callback_prefix: str = "task", user_id: int = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
        keyboard = []
        start_idx = page * config.MAX_TASKS_PER_PAGE
        end_idx = start_idx + config.MAX_TASKS_PER_PAGE
        page_tasks = tasks[start_idx:end_idx]
        
        for task in page_tasks:
            status_emoji = EMOJIS.get(task['status'], EMOJIS['pending'])
            priority_emoji = EMOJIS.get(f'priority_{task["priority"]}', '')
            
            button_text = f"{status_emoji} {priority_emoji} {task['title'][:30]}..."
            if len(task['title']) <= 30:
                button_text = f"{status_emoji} {priority_emoji} {task['title']}"
            
            task_row = [InlineKeyboardButton(
                button_text, 
                callback_data=f"{callback_prefix}_{task['id']}"
            )]
            keyboard.append(task_row)
            
            if user_id and task['assignee_id'] == user_id:
                action_buttons = []
                
                if task['status'] == 'new':
                    action_buttons.extend([
                        InlineKeyboardButton(f"üî¥ –í –†–ê–ë–û–¢–£", 
                                           callback_data=f"task_status_{task['id']}_in_progress"),
                        InlineKeyboardButton(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û", 
                                           callback_data=f"task_status_{task['id']}_completed")
                    ])
                elif task['status'] == 'in_progress':
                    action_buttons.append(
                        InlineKeyboardButton(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û", 
                                           callback_data=f"task_status_{task['id']}_completed")
                    )
                
                if action_buttons:
                    keyboard.append(action_buttons)
        
        nav_buttons = []
        total_pages = (len(tasks) + config.MAX_TASKS_PER_PAGE - 1) // config.MAX_TASKS_PER_PAGE
        
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                f"{EMOJIS['back']} –ù–∞–∑–∞–¥", 
                callback_data=f"{callback_prefix}_page_{page-1}"
            ))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                f"–î–∞–ª–µ–µ {EMOJIS['next']}", 
                callback_data=f"{callback_prefix}_page_{page+1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton(
            f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )])
        
        return InlineKeyboardMarkup(keyboard)
    
    def create_task_detail_keyboard(self, task: Dict, user_role: str, 
                                   user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
        keyboard = []
        
        if task['assignee_id'] == user_id:
            if task['status'] == 'new':
                keyboard.append([
                    InlineKeyboardButton(f"üî¥ –í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£", 
                                       callback_data=f"task_status_{task['id']}_in_progress")
                ])
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê", 
                                       callback_data=f"task_status_{task['id']}_completed")
                ])
            elif task['status'] == 'in_progress':
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê", 
                                       callback_data=f"task_status_{task['id']}_completed")
                ])
        
        if user_role == 'admin':
            keyboard.extend([
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_task_{task['id']}")],
                [InlineKeyboardButton(f"{EMOJIS['user']} –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", 
                                    callback_data=f"reassign_task_{task['id']}")],
                [InlineKeyboardButton(f"{EMOJIS['settings']} –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
                                    callback_data=f"change_status_{task['id']}")],
                [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"cancel_task_{task['id']}")]
            ])
        
        keyboard.extend([
            [InlineKeyboardButton(f"{EMOJIS['info']} –ò—Å—Ç–æ—Ä–∏—è", 
                                callback_data=f"task_history_{task['id']}")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="all_tasks"),
             InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        db_user = db.get_user_by_telegram_id(user.id)
        
        if db_user:
            db.update_user_activity(user.id)
            welcome_text = (
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}!\n\n"
                f"–í–∞—à–∞ —Ä–æ–ª—å: {USER_ROLES[db_user['role']]} {EMOJIS['admin'] if db_user['role'] == 'admin' else EMOJIS['user']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.create_main_menu_keyboard(db_user['role'])
            )
        else:
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                f"üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n"
                f"‚Ä¢ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n"
                f"‚Ä¢ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
            )
            
            await update.message.reply_text(welcome_text)
            return WAITING_PASSWORD
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            f"{EMOJIS['info']} –ö–æ–º–∞–Ω–¥—ã:\n\n"
            f"/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            f"/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            f"/my ‚Äî –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
            f"/help ‚Äî –ø–æ–º–æ—â—å\n"
        )
        await update.message.reply_text(text)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        await update.message.reply_text(
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.create_main_menu_keyboard(db_user['role'])
        )
    
    async def my_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        fake_query = type('Q', (), {'edit_message_text': update.message.reply_text})
        await self.show_my_tasks(fake_query, db_user)
    
    async def handle_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
        password = update.message.text
        user = update.effective_user
        
        role = self.auth_manager.validate_password(password)
        
        if role:
            success = db.create_user(
                telegram_id=user.id,
                username=user.username or "",
                first_name=user.first_name or "",
                last_name=user.last_name or "",
                role=role
            )
            
            if success:
                success_text = (
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                    f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\n"
                    f"üé≠ –†–æ–ª—å: {USER_ROLES[role]} {EMOJIS['admin'] if role == 'admin' else EMOJIS['user']}\n\n"
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏!"
                )
                
                await update.message.reply_text(
                    success_text,
                    reply_markup=self.create_main_menu_keyboard(role)
                )
            else:
                await update.message.reply_text(
                    f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                f"{EMOJIS['error']} –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return WAITING_PASSWORD
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        
        if not db_user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        db.update_user_activity(user.id)
        data = query.data
        
        if data == "main_menu":
            await self.show_main_menu(query, db_user)
        elif data == "all_tasks":
            await self.show_all_tasks(query, db_user)
        elif data == "my_tasks":
            await self.show_my_tasks(query, db_user)
        elif data == "active_tasks":
            await self.show_active_tasks(query, db_user, page=0)
        elif data == "completed_tasks":
            await self.show_completed_tasks(query, db_user, page=0)
        elif data.startswith("task_status_"):
            await self.change_task_status(query, data, db_user)
        elif data.startswith("task_"):
            await self.show_task_detail(query, data, db_user)
        elif data == "reports":
            await self.show_reports_menu(query, db_user)
        elif data == "gantt_chart":
            await self.generate_gantt_chart(query, db_user)
        elif data.startswith("task_page_") or data.startswith("my_task_page_") or data.startswith("active_task_page_") or data.startswith("completed_task_page_"):
            await self.handle_task_page_navigation(query, data, db_user)
        elif data.startswith("reassign_task_"):
            await self.handle_reassign_task(query, data, db_user)
        elif data.startswith("assign_to_"):
            await self.handle_assign_to_user(query, data, db_user)
        elif data.startswith("change_status_"):
            await self.handle_change_status_menu(query, data, db_user)
        elif data.startswith("task_history_"):
            await self.show_task_history(query, data, db_user)
        elif data == "report_general_excel":
            await self.generate_general_excel_report(query, db_user)
        elif data == "report_my_excel":
            await self.generate_my_excel_report(query, db_user)
        # report_users_stats —É–¥–∞–ª–µ–Ω–æ
        elif data == "report_my_stats":
            await self.show_my_stats(query, db_user)
        elif data == "user_management":
            await self.show_user_management(query, db_user)
        elif data == "user_settings":
            await self.show_user_settings(query, db_user)
        
        elif data.startswith("filter_"):
            await self.apply_filter(query, data, db_user)
        elif data == "filters_menu":
            await self.show_filters_menu(query)
        elif data.startswith("edit_task_"):
            await self.start_edit_task(query, data, db_user)
        elif data.startswith("cancel_task_"):
            await self.start_cancel_task(query, data, db_user)
        elif data.startswith("confirm_cancel_"):
            await self.confirm_cancel_task(query, data, db_user)
        else:
            await self.show_main_menu(query, db_user)
    
    async def show_main_menu(self, query, db_user):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_stats = db.get_user_stats(db_user['id'])
        
        menu_text = (
            f"üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            f"üë§ {db_user['first_name']} {db_user['last_name']}\n"
            f"üé≠ –†–æ–ª—å: {USER_ROLES[db_user['role']]}\n\n"
            f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {user_stats['total_tasks']}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_stats['completed_tasks']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_tasks']}\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {user_stats['overdue_tasks']}\n"
        )
        
        await query.edit_message_text(
            menu_text,
            reply_markup=self.create_main_menu_keyboard(db_user['role']),
            parse_mode='Markdown'
        )
    
    async def show_all_tasks(self, query, db_user, page=0):
        tasks = db.get_all_tasks()
        
        if not tasks:
            await query.edit_message_text(
                f"{EMOJIS['info']} –ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
                reply_markup=InlineKeyboardMarkup([[\
                    InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        text = f"üìã **–í—Å–µ –∑–∞–¥–∞—á–∏** (–í—Å–µ–≥–æ: {len(tasks)})\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=self.create_task_list_keyboard(tasks, page, "task", db_user['id'] if db_user['role'] == 'user' else None),
            parse_mode='Markdown'
        )
    
    async def show_my_tasks(self, query, db_user, page=0):
        if db_user['role'] == 'admin':
            tasks = db.get_all_tasks()
        else:
            tasks = db.get_tasks_by_user(db_user['id'])
        
        if not tasks:
            await query.edit_message_text(
                f"{EMOJIS['info']} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
                reply_markup=InlineKeyboardMarkup([[\
                    InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        text = f"üìù **–ú–æ–∏ –∑–∞–¥–∞—á–∏** (–í—Å–µ–≥–æ: {len(tasks)})\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=self.create_task_list_keyboard(tasks, page, "my_task", db_user['id']),
            parse_mode='Markdown'
        )
    
    async def show_active_tasks(self, query, db_user, page=0):
        tasks = db.get_tasks_by_user(db_user['id'], 'in_progress')
        tasks.extend(db.get_tasks_by_user(db_user['id'], 'new'))
        
        if not tasks:
            await query.edit_message_text(
                f"{EMOJIS['info']} –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=InlineKeyboardMarkup([[\
                    InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        text = f"üïê **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏** (–í—Å–µ–≥–æ: {len(tasks)})\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=self.create_task_list_keyboard(tasks, page, "active_task", db_user['id']),
            parse_mode='Markdown'
        )
    
    async def show_completed_tasks(self, query, db_user, page=0):
        tasks = db.get_tasks_by_user(db_user['id'], 'completed')
        
        if not tasks:
            await query.edit_message_text(
                f"{EMOJIS['info']} –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=InlineKeyboardMarkup([[\
                    InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        text = f"‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏** (–í—Å–µ–≥–æ: {len(tasks)})\n\n"
        
        await query.edit_message_text(
            text,
            reply_markup=self.create_task_list_keyboard(tasks, page, "completed_task", db_user['id']),
            parse_mode='Markdown'
        )
    
    async def show_task_detail(self, query, data, db_user):
        task_id = int(data.split('_')[-1])
        task = db.get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        text = format_task(task, detailed=True)
        
        await query.edit_message_text(
            text,
            reply_markup=self.create_task_detail_keyboard(task, db_user['role'], db_user['id']),
            parse_mode='Markdown'
        )
    
    async def start_search(self, query):
        await query.edit_message_text(
            "üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)")
        return SEARCH_QUERY
    
    async def handle_search_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.message.text.strip()
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        tasks = db.search_tasks(query_text=q, assignee_id=None if db_user['role']=='admin' else db_user['id'])
        if not tasks:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END
        await update.message.reply_text(
            f"–ù–∞–π–¥–µ–Ω–æ: {len(tasks)}",
            reply_markup=self.create_task_list_keyboard(tasks, 0, 'task', db_user['id'] if db_user['role']=='user' else None)
        )
        return ConversationHandler.END
    
    async def show_filters_menu(self, query):
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=self.create_filters_keyboard())
    
    async def apply_filter(self, query, data, db_user):
        parts = data.split('_')
        ftype = parts[1]
        fval = '_'.join(parts[2:])
        kwargs = {}
        if ftype == 'status':
            kwargs['status'] = fval
        if ftype == 'priority':
            kwargs['priority'] = fval
        if db_user['role'] == 'user':
            kwargs['assignee_id'] = db_user['id']
        tasks = db.search_tasks(**kwargs)
        if not tasks:
            await query.edit_message_text("–ü–æ —Ñ–∏–ª—å—Ç—Ä—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=self.create_filters_keyboard())
            return
        await query.edit_message_text(
            f"–ù–∞–π–¥–µ–Ω–æ: {len(tasks)}",
            reply_markup=self.create_task_list_keyboard(tasks, 0, 'task', db_user['id'] if db_user['role']=='user' else None)
        )
    
    async def change_task_status(self, query, data, db_user):
        parts = data.split('_')
        task_id = int(parts[2])
        new_status = parts[3]
        
        task = db.get_task_by_id(task_id)
        if not task:
            await query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if task['assignee_id'] != db_user['id'] and db_user['role'] != 'admin':
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
            return
        
        old_status = task['status']
        success = db.update_task_status(task_id, new_status, db_user['id'])
        
        if success:
            if new_status == 'completed':
                await query.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            elif new_status == 'in_progress':
                await query.answer("üî¥ –ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
            else:
                await query.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{TASK_STATUS[new_status]}'")
            
            if task['creator_id'] != db_user['id']:
                try:
                    all_users = db.get_all_users()
                    creator = None
                    for user in all_users:
                        if user['id'] == task['creator_id']:
                            creator = user
                            break
                    
                    if creator:
                        updated_task = db.get_task_by_id(task_id)
                        await self.notification_manager.notify_task_status_changed(
                            updated_task, old_status, new_status, creator['telegram_id']
                        )
                        if new_status == 'completed':
                            completion_message = (
                                f"üéâ **–ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê!**\n\n"
                                f"üìù **–ó–∞–¥–∞—á–∞:** {updated_task['title']}\n"
                                f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {db_user['first_name']} {db_user['last_name']}\n"
                                f"‚è∞ **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {format_datetime(get_current_tashkent_time())}\n"
                                f"üìä **–°—Ç–∞—Ç—É—Å:** {TASK_STATUS[new_status]}\n\n"
                                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè"
                            )
                            await self.notification_manager.send_notification(
                                creator['telegram_id'], completion_message, task_id
                            )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            await self.show_task_detail(query, f"task_{task_id}", db_user)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    
    async def start_create_task(self, query, context):
        text = (
            f"{EMOJIS['create_task']} **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–æ {config.MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        context.user_data['creating_task'] = {}
        return CREATING_TASK_TITLE
    
    async def handle_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        title = update.message.text.strip()
        
        if len(title) > config.MAX_TASK_TITLE_LENGTH:
            await update.message.reply_text(
                f"{EMOJIS['error']} –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {config.MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:"
            )
            return CREATING_TASK_TITLE
        
        context.user_data['creating_task']['title'] = title
        
        text = (
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–æ {config.MAX_TASK_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)\n"
            f"–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return CREATING_TASK_DESCRIPTION
    
    async def handle_task_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        description = update.message.text.strip()
        
        if description == '-':
            description = ""
        elif len(description) > config.MAX_TASK_DESCRIPTION_LENGTH:
            await update.message.reply_text(
                f"{EMOJIS['error']} –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {config.MAX_TASK_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
            )
            return CREATING_TASK_DESCRIPTION
        
        context.user_data['creating_task']['description'] = description
        
        users = db.get_all_users()
        if not users:
            await update.message.reply_text(f"{EMOJIS['error']} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!")
            return ConversationHandler.END
        
        keyboard = []
        for user in users:
            user_name = f"{user['first_name']} {user['last_name']}"
            role_emoji = EMOJIS['admin'] if user['role'] == 'admin' else EMOJIS['user']
            keyboard.append([InlineKeyboardButton(
                f"{role_emoji} {user_name}", 
                callback_data=f"assign_user_{user['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton(f"{EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_task")])
        
        text = (
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {context.user_data['creating_task']['title']}\n"
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {context.user_data['creating_task']['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**"
        )
        
        await update.message.reply_text(
            text, 
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return CREATING_TASK_ASSIGNEE
    
    async def handle_task_assignee(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_create_task":
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        if query.data.startswith("assign_user_"):
            assignee_id = int(query.data.split("_")[-1])
            context.user_data['creating_task']['assignee_id'] = assignee_id
            
            assignee = None
            for user in db.get_all_users():
                if user['id'] == assignee_id:
                    assignee = user
                    break
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å", callback_data="deadline_1d"),
                 InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="deadline_3d")],
                [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="deadline_7d"),
                 InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü", callback_data="deadline_30d")],
                [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="deadline_manual"),
                 InlineKeyboardButton("‚è∞ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline_none")],
                [InlineKeyboardButton(f"{EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_task")]
            ]
            
            assignee_name = f"{assignee['first_name']} {assignee['last_name']}" if assignee else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            text = (
                f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {context.user_data['creating_task']['title']}\n"
                f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {context.user_data['creating_task']['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚úÖ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {assignee_name}\n\n"
                f"‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω:**"
            )
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return CREATING_TASK_DEADLINE
    
    async def handle_task_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_create_task":
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        deadline = None
        if query.data == "deadline_1d":
            deadline = to_utc(get_current_tashkent_time() + timedelta(days=1))
        elif query.data == "deadline_3d":
            deadline = to_utc(get_current_tashkent_time() + timedelta(days=3))
        elif query.data == "deadline_7d":
            deadline = to_utc(get_current_tashkent_time() + timedelta(days=7))
        elif query.data == "deadline_30d":
            deadline = to_utc(get_current_tashkent_time() + timedelta(days=30))
        elif query.data == "deadline_none":
            deadline = None
        elif query.data == "deadline_manual":
            text = (
                f"üìÖ **–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
                f"‚Ä¢ `25.12.2024 18:00`\n"
                f"‚Ä¢ `25.12.2024`\n"
                f"‚Ä¢ `–∑–∞–≤—Ç—Ä–∞`\n"
                f"‚Ä¢ `—á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π`\n"
                f"‚Ä¢ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞`"
            )
            await query.edit_message_text(text, parse_mode='Markdown')
            return CREATING_TASK_DEADLINE
        
        context.user_data['creating_task']['deadline'] = deadline
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJIS['priority_high']} –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
            [InlineKeyboardButton(f"{EMOJIS['priority_medium']} –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
            [InlineKeyboardButton(f"{EMOJIS['priority_low']} –ù–∏–∑–∫–∏–π", callback_data="priority_low")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_task")]
        ]
        
        deadline_text = format_datetime(deadline) if deadline else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        text = (
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {context.user_data['creating_task']['title']}\n"
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {context.user_data['creating_task']['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚úÖ **–î–µ–¥–ª–∞–π–Ω:** {deadline_text}\n\n"
            f"üî• **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**"
        )
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return CREATING_TASK_PRIORITY
    
    async def handle_manual_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        deadline_str = update.message.text.strip()
        deadline = validate_deadline(deadline_str)
        
        if not deadline:
            await update.message.reply_text(
                f"{EMOJIS['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ `25.12.2024 18:00`\n"
                f"‚Ä¢ `25.12.2024`\n"
                f"‚Ä¢ `–∑–∞–≤—Ç—Ä–∞`\n"
                f"‚Ä¢ `—á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π`",
                parse_mode='Markdown'
            )
            return CREATING_TASK_DEADLINE
        
        context.user_data['creating_task']['deadline'] = to_utc(deadline)
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJIS['priority_high']} –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
            [InlineKeyboardButton(f"{EMOJIS['priority_medium']} –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
            [InlineKeyboardButton(f"{EMOJIS['priority_low']} –ù–∏–∑–∫–∏–π", callback_data="priority_low")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_task")]
        ]
        
        deadline_text = format_datetime(deadline)
        
        text = (
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {context.user_data['creating_task']['title']}\n"
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {context.user_data['creating_task']['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚úÖ **–î–µ–¥–ª–∞–π–Ω:** {deadline_text}\n\n"
            f"üî• **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**"
        )
        
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return CREATING_TASK_PRIORITY
    
    async def handle_task_priority(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_create_task":
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        priority_map = {
            "priority_high": "high",
            "priority_medium": "medium", 
            "priority_low": "low"
        }
        priority = priority_map.get(query.data, "medium")
        
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        
        try:
            task_id = db.create_task(
                title=context.user_data['creating_task']['title'],
                description=context.user_data['creating_task']['description'],
                creator_id=db_user['id'],
                assignee_id=context.user_data['creating_task']['assignee_id'],
                priority=priority,
                deadline=context.user_data['creating_task']['deadline']
            )
            
            if context.user_data['creating_task']['assignee_id']:
                assignee = None
                for user_data in db.get_all_users():
                    if user_data['id'] == context.user_data['creating_task']['assignee_id']:
                        assignee = user_data
                        break
                
                if assignee:
                    task = db.get_task_by_id(task_id)
                    await self.notification_manager.notify_task_assigned(task, assignee['telegram_id'])
            
            task = db.get_task_by_id(task_id)
            success_text = (
                f"{EMOJIS['success']} **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"{format_task(task, detailed=True)}"
            )
            
            keyboard = [
                [InlineKeyboardButton(f"{EMOJIS['create_task']} –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="create_task")],
                [InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await query.edit_message_text(
                success_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text(
                f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
        
        context.user_data.pop('creating_task', None)
        return ConversationHandler.END
    
    async def show_reports_menu(self, query, db_user):
        keyboard = []
        
        if db_user['role'] == 'admin':
            keyboard.extend([
                [InlineKeyboardButton(f"{EMOJIS['excel']} –û–±—â–∏–π –æ—Ç—á—ë—Ç Excel", callback_data="report_general_excel")],
                [InlineKeyboardButton(f"{EMOJIS['gantt']} –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞", callback_data="gantt_chart")]
            ])
        else:
            keyboard.extend([
                [InlineKeyboardButton(f"{EMOJIS['excel']} –ú–æ–π –æ—Ç—á—ë—Ç Excel", callback_data="report_my_excel")],
                [InlineKeyboardButton(f"{EMOJIS['chart']} –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="report_my_stats")]
            ])
        
        keyboard.append([InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await query.edit_message_text(
            f"{EMOJIS['reports']} **–û—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def generate_gantt_chart(self, query, db_user):
        await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞...")
        
        try:
            tasks = db.get_all_tasks()
            chart_path = self.report_generator.create_gantt_chart(tasks)
            
            await query.message.reply_photo(
                photo=open(chart_path, 'rb'),
                caption=f"{EMOJIS['gantt']} **–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞**\n\n–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞: {e}")
            await query.message.reply_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã.")
    
    async def handle_task_page_navigation(self, query, data, db_user):
        parts = data.split("_")
        page = int(parts[-1])
        
        if data.startswith("task_page_"):
            await self.show_all_tasks(query, db_user, page)
        elif data.startswith("my_task_page_"):
            await self.show_my_tasks(query, db_user, page)
        elif data.startswith("active_task_page_"):
            await self.show_active_tasks(query, db_user, page)
        elif data.startswith("completed_task_page_"):
            await self.show_completed_tasks(query, db_user, page)
    
    async def handle_reassign_task(self, query, data, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        task_id = int(data.split("_")[-1])
        task = db.get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        users = db.get_all_users()
        keyboard = []
        
        for user in users:
            user_name = f"{user['first_name']} {user['last_name']}"
            role_emoji = EMOJIS['admin'] if user['role'] == 'admin' else EMOJIS['user']
            keyboard.append([InlineKeyboardButton(
                f"{role_emoji} {user_name}", 
                callback_data=f"assign_to_{user['id']}_{task_id}"
            )])
        
        keyboard.append([InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data=f"task_{task_id}")])
        
        text = f"üë§ **–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:**\n\n{task['title']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def handle_assign_to_user(self, query, data, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        parts = data.split("_")
        new_assignee_id = int(parts[2])
        task_id = int(parts[3])
        
        success = db.assign_task(task_id, new_assignee_id, db_user['id'])
        
        if success:
            task = db.get_task_by_id(task_id)
            
            if task['assignee_telegram_id']:
                await self.notification_manager.notify_task_assigned(task, task['assignee_telegram_id'])
            
            await query.answer("‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞!")
            await self.show_task_detail(query, f"task_{task_id}", db_user)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    
    async def handle_change_status_menu(self, query, data, db_user):
        task_id = int(data.split("_")[-1])
        task = db.get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if db_user['role'] != 'admin' and task['assignee_id'] != db_user['id']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJIS['new']} –ù–æ–≤–∞—è", callback_data=f"task_status_{task_id}_new")],
            [InlineKeyboardButton(f"{EMOJIS['pending']} –í —Ä–∞–±–æ—Ç–µ", callback_data=f"task_status_{task_id}_in_progress")],
            [InlineKeyboardButton(f"{EMOJIS['done']} –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"task_status_{task_id}_completed")],
            [InlineKeyboardButton(f"{EMOJIS['error']} –û—Ç–º–µ–Ω–µ–Ω–∞", callback_data=f"task_status_{task_id}_cancelled")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data=f"task_{task_id}")]
        ]
        
        text = f"üìä **–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:**\n\n{task['title']}\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {TASK_STATUS[task['status']]}"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def show_task_history(self, query, data, db_user):
        task_id = int(data.split("_")[-1])
        task = db.get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        history = db.get_task_history(task_id)
        
        text = f"üìã **–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏:** {task['title']}\n\n"
        
        if history:
            for entry in history:
                action_time = format_datetime(entry['created_at'])
                text += f"üïê {action_time}\nüë§ {entry['user_name']}\nüìù {entry['action']}\n\n"
        else:
            text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
        
        keyboard = [[InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data=f"task_{task_id}")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def generate_general_excel_report(self, query, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...")
        
        try:
            tasks = db.get_all_tasks()
            report_path = self.report_generator.create_excel_report(tasks)
            
            await query.message.reply_document(
                document=open(report_path, 'rb'),
                caption=f"{EMOJIS['excel']} **–û–±—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º**\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")
    
    async def generate_my_excel_report(self, query, db_user):
        await query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –æ—Ç—á—ë—Ç...")
        
        try:
            tasks = db.get_tasks_by_user(db_user['id'])
            
            if not tasks:
                await query.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á—ë—Ç–∞")
                return
            
            filename = f"my_tasks_report_{get_current_tashkent_time().strftime('%Y%m%d_%H%M%S')}.xlsx"
            report_path = self.report_generator.create_excel_report(tasks, filename)
            
            await query.message.reply_document(
                document=open(report_path, 'rb'),
                caption=f"{EMOJIS['excel']} **–í–∞—à –ª–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç**\n\n–í–∞—à–∏ –∑–∞–¥–∞—á–∏: {len(tasks)}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á—ë—Ç–∞: {e}")
            await query.message.reply_text(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")
    
    # –ú–µ—Ç–æ–¥ show_users_stats —É–¥–∞–ª—ë–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É
    
    async def show_my_stats(self, query, db_user):
        stats = db.get_user_stats(db_user['id'])
        
        completion_rate = (stats['completed_tasks'] / max(stats['total_tasks'], 1)) * 100
        
        text = (
            f"{EMOJIS['chart']} **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üìä **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_tasks']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_tasks']}\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['overdue_tasks']}\n\n"
            f"üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {completion_rate:.1f}%\n\n"
        )
        
        if completion_rate >= 90:
            text += f"üèÜ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!**"
        elif completion_rate >= 70:
            text += f"üëç **–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!**"
        else:
            text += f"üí™ **–ï—Å—Ç—å –∫—É–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!**"
        
        keyboard = [[InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def show_user_management(self, query, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        users = db.get_all_users()
        general_stats = db.get_general_stats()
        
        text = (
            f"{EMOJIS['admin']} **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {general_stats['total_users']}\n"
            f"üìã **–í—Å–µ–≥–æ –∑–∞–¥–∞—á:** {general_stats['total_tasks']}\n"
            f"‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** {general_stats['completed_tasks']}\n"
            f"üî¥ **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:** {general_stats['overdue_tasks']}\n\n"
            f"**–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        )
        
        for user in users[:10]:
            role_emoji = EMOJIS['admin'] if user['role'] == 'admin' else EMOJIS['user']
            text += f"‚Ä¢ {role_emoji} {user['first_name']} {user['last_name']} ({USER_ROLES[user['role']]})\n"
        
        if len(users) > 10:
            text += f"\n... –∏ –µ—â—ë {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def show_user_settings(self, query, db_user):
        text = (
            f"{EMOJIS['settings']} **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"üë§ **–ò–º—è:** {db_user['first_name']} {db_user['last_name']}\n"
            f"üé≠ **–†–æ–ª—å:** {USER_ROLES[db_user['role']]}\n"
            f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {format_datetime(db_user['registered_at'], show_time=False)}\n\n"
            f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** –í–∫–ª—é—á–µ–Ω—ã\n"
            f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –ó–∞ 24—á, 6—á, 1—á –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞"
        )
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJIS['chart']} –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="report_my_stats")],
            [InlineKeyboardButton(f"{EMOJIS['excel']} –ú–æ–π –æ—Ç—á—ë—Ç", callback_data="report_my_excel")],
            [InlineKeyboardButton(f"{EMOJIS['menu']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    async def start_edit_task(self, query, data, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        task_id = int(data.split('_')[-1])
        context = query.message.chat  # not used, kept for symmetry
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field_title_{task_id}")],
            [InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field_description_{task_id}")],
            [InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_field_priority_{task_id}")],
            [InlineKeyboardButton("–î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_field_deadline_{task_id}")],
            [InlineKeyboardButton(f"{EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data=f"task_{task_id}")]
        ]
        await query.edit_message_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

    async def start_cancel_task(self, query, data, db_user):
        if db_user['role'] != 'admin':
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        task_id = int(data.split('_')[-1])
        keyboard = [
            [InlineKeyboardButton("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_yes_{task_id}")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"task_{task_id}")]
        ]
        await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=InlineKeyboardMarkup(keyboard))

    async def confirm_cancel_task(self, query, data, db_user):
        parts = data.split('_')
        if parts[2] != 'yes':
            await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        task_id = int(parts[3])
        if db.cancel_task(task_id, db_user['id']):
            await query.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await self.show_task_detail(query, f"task_{task_id}", db_user)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

    async def start_create_task_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user = update.effective_user
        db_user = db.get_user_by_telegram_id(user.id)
        
        if not db_user or db_user['role'] != 'admin':
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.")
            return ConversationHandler.END
        
        await query.answer()
        return await self.start_create_task(query, context)
    
    async def cancel_create_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.pop('creating_task', None)
        return ConversationHandler.END
    
    def run(self):
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        registration_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start_command)],
            states={
                WAITING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_password)],
            },
            fallbacks=[CommandHandler("start", self.start_command)]
        )
        
        create_task_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_create_task_conversation, pattern="^create_task$")],
            states={
                CREATING_TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_task_title)],
                CREATING_TASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_task_description)],
                CREATING_TASK_ASSIGNEE: [CallbackQueryHandler(self.handle_task_assignee)],
                CREATING_TASK_DEADLINE: [
                    CallbackQueryHandler(self.handle_task_deadline),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_manual_deadline)
                ],
                CREATING_TASK_PRIORITY: [CallbackQueryHandler(self.handle_task_priority)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel_create_task, pattern="^cancel_create_task$")]
        )

        application.add_handler(registration_handler)
        application.add_handler(create_task_handler)
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("menu", self.menu_command))
        application.add_handler(CommandHandler("my", self.my_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        async def post_init(app):
            loop = asyncio.get_event_loop()
            loop.create_task(self.notification_manager.start_notification_loop(app))
        
        application.post_init = post_init
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = TaskManagerBot()
    bot.run()
